// Функция как объект

// Говоря, что функция является объектом, мы имеем ввиду, что ее можно запомнить в переменной и передать из одного места в приложении в другое.

// Все функции являются полноценными объектами. Пишем имя без скобки!

var func = myFunction;

// Любую функцию можно присвоить переменной, либо передать другой функции в кач-ве параметров, или вернуть в кач-ве значения функции.

void main() {
  Function person =
      getName; // этим действием мы создали переменную person и присвоили ей функцию getName. Круглые скобки не ставим!
  person(); // теперь мы можем выполнить переменную person как обычную функцию. Фактически, мы вызываем ту функцию. на которую ссылается наша переменная.

  person = getLastName; // можем присвоить этой же переменной еще другую функцию
  person();

  getPerson(getName); // в функцию getPerson передаем другую функцию getName
  getPerson(getLastName);

  Function myPerson = getnameOrLastName('Юрий');
  myPerson();
}

// Любая функция в дарт представляет тип function и фактически может выступать в кач-ве отдельного объекта. Вместо var можно писать Function

// Рассмотрим, как могут функции выступать в кач-ве параметров других функций.

// функция может выступать в качестве возвращаемого значения

Function getnameOrLastName(String nameOrLastname) {
  // функция, выступает в кач-ве возвращаемого параметра для некоторой переменной.
  if (nameOrLastname == 'Юрий')
    return getName;
  else
    return getLastName;
}

void getPerson(Function myFunction) {
  myFunction();
}

void getName() {
  // функция, распечатывает имя
  print('Юрий');
}

void getLastName() {
  // функция, распечатывает фамилию
  print('Аванесов');
}
