// Функции dart

// Функции представляют некоторые действия. Мы можем оформить набор операторов в виде одной функции и многократно вызывать ее в программе. Функции, на каждом этапе, принимают входные данные и порождает результаты. Функция может возвращать определенные значения, для этого используется оператор return, который завершает выполнение функции. Т.е. то, что будет написано после return, работать уже не будет, надо писать ДО return. 

// пример правильного написания фнукции:

// [тип] имя_функции(параметры) {
//   тело функции
// }

// , где ТИП - если функция не возвращает никакого значения (например, string), то используется тип void.
// Имя функции - произвольное название
// параметры - тут перечисляем параметры функции, если они отсутствует, то просто пустые скобки ()
// тело функции в фигурных скобках - содержит выполняемые выражения.

void main() {
  testFunction();
  String myCity = stFunction();
  print(myCity);
  String myAge = getAge(32);
  print(myAge);
}

void testFunction() {
  print('Avanesov Yura');
}



// обращаем внимание, что в дарте писать function или func не требуется.

// сама по себе функция ничего не выполняет, по умолчанию среда дарт выполняет только функцию main, поэтому в ней и нужно будет вызывать нашу тестовую функцию. 

String stFunction() {
  return 'Moscow'
}

// в языке dart можно не указывать возвращаемый тип у функций, в дарте тип выводится исходя из значения после оператора return. Результат подобных функций можно присвоить переменной и использовать в нашей программе. Для этого просто создаем переменную, указываем ей тип и присваиваем ей функцию (имя) - myCity.

// А теперь рассмотрим функцию, которая будет принимать некий параметр. 

String getAge(int age) {
  return 'My age $age';
}

// Все функции (в частности, в данном примере), состоят из одного выражения. Поэтому мы можем их сократить.

void testFunction() => print('Avanesov Yura');
String stFunction() => 'Moscow';
String getAge(int age) => 'My age $age';

// Эту запись можно прочитать как: "вернуть результат выражения". в JS это стрелочная функция. 


// Параметры функции - это то, что находится внутри круглых скобок (). В данном примере в кач-ве параметров мы передаем имя name в виде строки String, и возраст age в виде ЦЕЛОЧИСЛЕННОГО значения int: 

getPerson(String name, int age) {
  print('Name: $name, Age: $age');
}

// вызываем в методе main и передаем аргументы по позициям, т.е. первым идет name, второй age. Аргументы - это значение для параметра функций и передается по позициям (первый - первому, второй - второму). Количество передаваемых аргументов должно соответствовать количеству параметров. Между типами аргументов и типами параметров должно быть соответствие. 

void main() {
  getPerson('Yura', 32);
}

// но мы также можем не передавать тип параметров в функции. И получается, что нам неизвестен тип параметров. 

getPersonNo(name, age) {
  print('Name: $name, Age: $age');
}

// и если такую запись мы выведем наоборот, то получим и результат наоборот: 

void main() {
  getPersonNo(32, 'Yura');
}


// не обязательные параметры - ряд параметров можем сделать не обязательными, т.е. не передавать в них значения. Для этого нужно заключить их в квадратные скобки. 

getPersonImportant(String name, [int age]) {
  print('Name: $name, Age: $age');
}

// тут мы обернули параметр age в квадратные скобки, и теперь можем передать только один аргумент - name. По умолчанию вернет значение null. 

void main() {
  getPersonImportant('Yura');
}

// Именовые необязательные параметры. Дарт поддерживает передачу параметров по имени. Чтобы это реализовать, нужные параметры нужно заключить в фигурные скобки. 

getPersonName({String name, int age}) {
  print('Name: $name, Age: $age');
}

// Вызов метода: 

void main() {
  getPersonName(name: 'Yura', age: 33);
}

// при этом вызывать параметры в функции можем в любой последовательности. 
// Еще можно создавать аргументам значения по умолчанию. 

getPersonName({String name = 'Yura', int age = 33}) {
  print('Name: $name, Age: $age');
}

// можем вызвать функцию без значений и все равно заполнятся значения по умолчанию

void main() {
  getPersonName();
}

// если мы хотим изменить значения, то просто запишем:

void main() {
  getPersonName(age: 33);
}