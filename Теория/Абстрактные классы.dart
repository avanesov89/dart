// Абстрактные классы 

// Иногда нужен строгий тип базового класса, но при этом в каждом классе реализация подклассов может быть разной. Допустим, есть транспортные средства: авто, автобус, трамвай, поезд. По скольку данные объекты являются родственными, мы можем у них выделить общие свойства. Например, авто и автобус двигаются по дороге, а трамвай и поезд по рельсам. Поэтому мы можем предоставить им собственные реализации движения и все это вывести в отдельный метод. Это можно сделать абстрактными классами. Применяется ключевое слово abstract

// они похожи на обычные классы, за исключением того, что мы не можем создать напрямую объект абстрактного класса, используя его конструктор. Абстрактны классы описывают сущности, которые в реальности не имеют воплощения. 

void main() {
  Car car = Car();
  car.move();

  Train train = Train();
  train.move();
}

abstract class Vehicle {
  void move(); // не выполняет никакой полезной работы
}

class Car extends Vehicle {
  void move() {
    print("The car move on the road");
  }
}

class Train extends Vehicle {
  void move() {
    print("The train move on the rails");
  }
}

// Когда нужно использовать абстрактные классы? Когда нужно определить общий функционал для родственных объектов. Когда мы проектируем функциональную единица, которая содержит много базового функционала. В третьих, если нужно чтобы все производственные классы на всех уровнях имели общую реализацию. 

https://metanit.com/dart/tutorial/4.4.php